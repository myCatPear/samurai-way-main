{"version":3,"file":"static/js/449.e6b77605.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,mBCoB/M,EAZmB,SAACA,GAEhB,IAAMC,EAAI,mBAAeD,EAAME,IAE/B,OACI,gBAAKC,UAAS,UAAKC,EAAL,YAAuBA,GAArC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCDtC,EANgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAAkCJ,EAAMO,W,sCCD1CC,GAAYC,EAAAA,EAAAA,GAAiB,IAetBC,GAAsBC,EAAAA,EAAAA,GAAwB,CACvDC,KAAK,kBAD0BD,EAbgC,SAACX,GAChE,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOT,KAAM,iBAAkBU,UAAWC,EAAAA,GAAUC,YAAa,qBAAsBC,SAAU,CAACC,EAAAA,EAASZ,QAE/G,0BACI,6CCiBhB,EA1BgB,SAACR,GAEb,IAAMqB,EAAQrB,EAAMsB,YAChBC,EAAiBF,EAAMG,QAAQC,KAAI,SAACC,EAAEC,GAAH,OAAS,SAAC,EAAD,CAAoBrB,KAAMoB,EAAEpB,KAAMJ,GAAIwB,EAAExB,IAAvByB,MAC7DC,EAAkBP,EAAMQ,SAASJ,KAAI,SAACK,EAAEH,GAAH,OAAS,SAAC,EAAD,CAAiBzB,GAAI4B,EAAE5B,GAAIK,QAASuB,EAAEvB,SAAxBoB,MAMhE,OACI,iBAAKxB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKmB,KAEL,iBAAKpB,UAAWC,EAAhB,WACI,yBACKwB,KAEL,SAAClB,EAAD,CAAqBG,SAZJ,SAACkB,GAC1B/B,EAAMgC,mBAAmBD,EAAME,0B,8BCYvC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KARoB,SAACd,GACrB,MAAO,CACLC,YAAaD,EAAMC,eAMG,CACpBU,mBAAAA,EAAAA,IAEJI,EAAAA,EAJJ,CAKEC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__gWRzS\",\"dialogsItem\":\"Dialogs_dialogsItem__wjMG1\",\"dialog\":\"Dialogs_dialog__YYaNn\",\"active\":\"Dialogs_active__ajKdR\",\"messages\":\"Dialogs_messages__m5xoQ\",\"message\":\"Dialogs_message__BXii9\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    const path = `/dialogs/${props.id}`;\r\n\r\n    return (\r\n        <div className={`${classes.dialog} ${classes.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    id:number\r\n    message:string\r\n}\r\n\r\nconst Message = (props:MessagePropsType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;","import {MaxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControl/FormsControls\";\r\n\r\nexport type FormDataType ={\r\n    newMessageBody:string\r\n}\r\n\r\nconst maxLength = MaxLengthCreator(50)\r\n\r\n const AddMessageForm :React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newMessageBody\"} component={Textarea} placeholder={'Enter your message'} validate={[required,maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormDataType>({\r\n    form:\"addMessageForm\"\r\n})(AddMessageForm)","import React from 'react';\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { DialogsPropsType } from './DialogsContainer';\r\n\r\nimport { AddMessageReduxForm, FormDataType } from './AddMessageForm/AddMessageForm';\r\n\r\n\r\nconst Dialogs = (props:DialogsPropsType) => {\r\n\r\n    const state = props.dialogsPage\r\n    let dialogsElement = state.dialogs.map((d,i) => <DialogItem key={i} name={d.name} id={d.id}/>)\r\n    let messageElements = state.messages.map((m,i) => <Message key={i} id={m.id} message={m.message}/>)\r\n\r\n\r\n    const AddNewMessageHandler = (value:FormDataType) => {\r\n        props.sendMessageCreator(value.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElement}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    {messageElements}\r\n                </div>\r\n                <AddMessageReduxForm onSubmit={AddNewMessageHandler}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {\r\n    DialogsPageType,\r\n    sendMessageCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    sendMessageCreator:(newMessage:string) => void\r\n}\r\n\r\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state:AppStateType):mapStateToPropsType => {\r\n    return {\r\n      dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,{\r\n        sendMessageCreator\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"names":["props","path","id","className","classes","to","name","message","maxLength","MaxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","state","dialogsPage","dialogsElement","dialogs","map","d","i","messageElements","messages","m","value","sendMessageCreator","newMessageBody","compose","connect","withAuthRedirect","Dialogs"],"sourceRoot":""}